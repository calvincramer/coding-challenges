package problem061;

import java.util.ArrayList;
import java.util.List;
import mathtools.MF;
import static problem061.SetOf3Test.checkForSkip;

public class Problem061 {

    /*
    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

    Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
    Square	 	P4,n=n2                 1, 4, 9, 16, 25, ...
    Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
    Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
    Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
    Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
    
    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    1.  The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
    2.  Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
    3.  This is the only set of 4-digit numbers with this property.
    
    Find the sum of the only ordered set of six cyclic 4-digit numbers 
        for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
    */
    
    static List<Integer> triNums;
    static List<Integer> squareNums;
    static List<Integer> pentNums;
    static List<Integer> hexNums;
    static List<Integer> heptNums;
    static List<Integer> octNums;
    
    public static void main(String[] args) {
        
        MF.startTimer();
        
        triNums = new ArrayList<>();
        triNums.add(1);
        squareNums = new ArrayList<>();
        squareNums.add(1);
        pentNums = new ArrayList<>();
        pentNums.add(1);
        hexNums = new ArrayList<>();
        hexNums.add(1);
        heptNums = new ArrayList<>();
        heptNums.add(1);
        octNums = new ArrayList<>();
        octNums.add(1);
        
        int ind = 2;
        while (triNums.get(triNums.size()-1) < 10000) {  //fill up arrays with polygonal numbers less than 10000
            triNums.add(triangleNumbers(ind));
            ind++;
        }
        ind = 2;
        while (squareNums.get(squareNums.size()-1) < 10000) {
            squareNums.add(squareNumbers(ind));
            ind++;
        }
        ind = 2;
        while (pentNums.get(pentNums.size()-1) < 10000) {
            pentNums.add(pentagonalNumbers(ind));
            ind++;
        }
        ind = 2;
        while (hexNums.get(hexNums.size()-1) < 10000) {
            hexNums.add(hexagonalNumbers(ind));
            ind++;
        }
        ind = 2;
        while (heptNums.get(heptNums.size()-1) < 10000) {
            heptNums.add(heptagonalNumbers(ind));
            ind++;
        }
        ind = 2;
        while (octNums.get(octNums.size()-1) < 10000) {
            octNums.add(octagonalNumbers(ind));
            ind++;
        }
        
        
        String[] chain = new String[6];
        int[] intChain = new int[chain.length];
        long numCycles = 0;
        int[][] foundGrid = new int[6][6];  //y is each number, x if found in each poly
        
        for (int i0 = 1000; i0 <= 9999; i0++) { //for all 4 digit numbers
            chain[0] = i0 + "";
            System.out.println(chain[0]);
            intChain[0] = Integer.parseInt(chain[0]);
            fillInFound(0, intChain[0], foundGrid);
            if (checkForSkip(0, foundGrid))
                continue;
            
            for (int i1 = 00; i1 <= 99; i1++) { //for all 2 digit numbers (we know the first two digits)
                chain[1] = cycle(chain[0], i1);
                intChain[1] = Integer.parseInt(chain[1]);
                fillInFound(1, intChain[1], foundGrid);
                if (checkForSkip(1, foundGrid))
                    continue;

                for (int i2 = 00; i2 <= 99; i2++) {
                    chain[2] = cycle(chain[1], i2);
                    intChain[2] = Integer.parseInt(chain[2]);
                    fillInFound(2, intChain[2], foundGrid);
                    if (checkForSkip(2, foundGrid))
                        continue;

                    for (int i3 = 00; i3 <= 99; i3++) {
                        chain[3] = cycle(chain[2], i3);
                        intChain[3] = Integer.parseInt(chain[3]);
                        fillInFound(3, intChain[3], foundGrid);
                        if (checkForSkip(3, foundGrid))
                            continue;

                        for (int i4 = 00; i4 <= 99; i4++) {
                            chain[4] = cycle(chain[3], i4);
                            intChain[4] = Integer.parseInt(chain[4]);
                            fillInFound(4, intChain[4], foundGrid);

                            int firstTwoDigits = Integer.parseInt(chain[0].substring(0, 2));
                            chain[5] = cycle(chain[4], firstTwoDigits);
                            intChain[5] = Integer.parseInt(chain[5]);
                            fillInFound(5, intChain[5], foundGrid);

                            //checking
                            boolean skip = false;       //verify each number is 4 digits
                            for (int n : intChain) {
                                if ( (n+"").length() != 4) {
                                    skip = true;
                                    break;
                                } 
                            }
                            if (skip)
                                continue;
                            //check to see if grid has unique solution (every row and column has at least one found)
                            //numbers (rows)
                            boolean allFound = true;
                            for (int y = 0; y < foundGrid.length; y++) {
                                boolean foundSomething = false;
                                for (int x = 0; x < foundGrid[y].length; x++) {
                                    if (foundGrid[y][x] != -1) {
                                        foundSomething = true;
                                        break;
                                    }
                                }
                                if (!foundSomething) {
                                    allFound = false;
                                    break;
                                }
                            }
                            //polygons (verify at least one number goes into each poly)
                            for (int x = 0; x < foundGrid[0].length; x++) {
                                boolean foundSomething = false;
                                for (int y = 0; y < foundGrid.length; y++) {
                                    if (foundGrid[y][x] != -1) {
                                        foundSomething = true;
                                        break;
                                    }
                                }
                                if (!foundSomething) {
                                    allFound = false;
                                    break;
                                }
                            }

                            if (allFound) {
                                for (String cha : chain)
                                    System.out.println(cha);
                                for (int y = 0; y < foundGrid.length; y++) {
                                    for (int x = 0; x < foundGrid[0].length; x++) {
                                        System.out.print(foundGrid[y][x] + " ");
                                    }
                                    System.out.println();
                                }
                                int sum = 0;
                                for (int ch : intChain)
                                    sum += ch;
                                System.out.println("sum: " + sum + "\n");
                            }


                            numCycles++;


                        }
                    }
                }
            }
        }
        
        System.out.println();
        System.out.println("time: " + MF.getElapsedSeconds());
    }
    
    public static boolean checkForSkip(int y, int[][] grid) {
        if (y < 0)
            return false;
        
        //check for all -1's
        boolean allNotFound = true;
        for (int x = 0; x < grid[0].length; x++)
            if (grid[0][x] != -1)
                allNotFound = false;
        if (allNotFound)
            return true;
        
        if (y == 0)
            return false;
        
        //check rows above y for occurence (may be different) in same column
        for (int x = 0; x < grid[0].length; x++) {
            if (grid[y][x] == -1) 
                continue;
            for (int upY = y - 1; upY >= 0; upY--) {
                if (grid[x][upY] != -1) {
                    //if found occurence in upper row, search for any other occurence in that row
                    //if that is the only occurence, return true
                    boolean foundDiffOcc = false;
                    for (int testX = 0; testX < grid[0].length; testX++) {
                        if (testX == x)
                            continue;
                        if (grid[upY][testX] != -1) {
                            foundDiffOcc = true;
                            break;
                        }
                    }
                    if (!foundDiffOcc)
                        return true;    //skip
                }
            }
        }
        //check rows above y for same occurence
        for (int x = 0; x < grid[0].length; x++) {
            if (grid[y][x] == -1)
                continue;
            //search upper rows for a row with only grid[y][x]
            for (int upY = y - 1; upY >= 0; upY--) {
                boolean foundyx = false;
                boolean anyOther = false;
                for (int testX = 0; testX < grid[0].length; testX++) {
                    if (grid[upY][testX] == -1)
                        continue;
                    else if (grid[upY][testX] == grid[y][x])
                        foundyx = true;
                    else
                        anyOther = true;
                }
                if (foundyx && !anyOther)
                    return true;
            }
        }
        
        return false;
    }
    
    public static void fillInFound(int y, int num, int[][] grid) {
        grid[y][0] = triNums.indexOf(num);
        grid[y][1] = squareNums.indexOf(num);
        grid[y][2] = pentNums.indexOf(num);
        grid[y][3] = hexNums.indexOf(num);
        grid[y][4] = heptNums.indexOf(num);
        grid[y][5] = octNums.indexOf(num);
    }
    
    
    //returns index of number in arr, if found. Negative number returned if not found
    public static int findNumIn(List<Integer> arr, int numToFind) {
        return 0;
    }
    
    public static String cycle(String oldNumber, int newNumber) {
        if (newNumber < 10)
            return oldNumber.substring(2) + "0" + newNumber;
        else
            return oldNumber.substring(2) + newNumber;
    }
    
    public static int triangleNumbers(int index) {
        if (index < 1)
            return 0;
        return index * (index + 1) / 2;
    }
    
    public static int squareNumbers(int index) {
        if (index < 1) 
            return 0;
        return index * index;
    }
    
    public static int pentagonalNumbers(int index) {
        if (index < 1) 
            return 0;
        return index * (3 * index - 1) / 2;
    } 
    
    public static int hexagonalNumbers(int index) {
        if (index < 1) 
            return 0;
        return index * (2 * index - 1);
    }
    
    public static int heptagonalNumbers(int index) {
        if (index < 1) 
            return 0;
        return index * (5 * index - 3) / 2;
    }
    
    public static int octagonalNumbers(int index) {
        if (index < 1) 
            return 0;
        return index * (3 * index - 2);
    }

}
