package problem078;

import mathtools.MF;

public class Try2 {
    
    public static void main(String[] args) {
        for (int i = 0; i < 100000; i++) {
            MF.startTimer();
            long res = partition(i,i);
            System.out.println(i + ":\t" + partition(i, i) + "\t" + MF.getElapsedSeconds());
            if (res % 1000000 == 0) {
                System.out.println("winner winner");
                System.out.println("n= " + i);
                System.out.println("p(n)= " + res);
            }
        }
    }
    
    /**
     * 100% credit: http://www.programminglogic.com/integer-partition-algorithm/
     * Thank you Daniel Scocco!
     * @param sum
     * @param largestNumber
     * @return 
     */
    public static long partition(long sum, long largestNumber){
        if (largestNumber==0)
            return 0;
        if (sum==0)
            return 1;
        if (sum<0)
            return 0;

        return partition(sum,largestNumber-1) + partition(sum-largestNumber,largestNumber);
    }

}
/*
1:	1	3.801E-6
2:	2	3.801E-6
3:	3	4.386E-6
4:	5	5.263E-6
5:	7	9.355E-6
6:	11	1.9295E-5
7:	15	1.3741E-5
8:	22	2.6604E-5
9:	30	1.3156E-5
10:	42	1.2571E-5
11:	56	1.1109E-5
12:	77	1.26295E-4
13:	101	1.04954E-4
14:	135	2.4265E-5
15:	176	2.4265E-5
16:	231	4.7361E-5
17:	297	5.467E-5
18:	385	3.5667E-5
19:	490	2.8943E-5
20:	627	3.0112E-5
21:	792	4.5899E-5
22:	1002	5.4084E-5
23:	1255	6.1979E-5
24:	1575	1.17818E-4
25:	1958	1.00861E-4
26:	2436	1.05831E-4
27:	3010	1.29511E-4
28:	3718	1.22495E-4
29:	4565	1.87981E-4
30:	5604	1.83888E-4
31:	6842	2.37389E-4
32:	8349	3.44681E-4
33:	10143	3.27432E-4
34:	12310	5.62482E-4
35:	14883	4.86179E-4
36:	17977	6.29723E-4
37:	21637	7.41986E-4
38:	26015	8.9547E-4
39:	31185	0.001053632
40:	37338	0.001256816
41:	44583	0.001874261
42:	53174	0.002064288
43:	63261	0.002190584
44:	75175	0.002943971
45:	89134	0.003405886
46:	105558	0.004261596
47:	124754	0.004825541
48:	147273	0.005298857
49:	173525	0.006394296
50:	204226	0.007642048
51:	239943	0.008963765
52:	281589	0.010602099
53:	329931	0.012306504
54:	386155	0.014904918
55:	451276	0.016997856
56:	526823	0.020149105
57:	614154	0.023569901
58:	715220	0.027417821
59:	831820	0.032343639
60:	966467	0.037391074
61:	1121505	0.045087207
62:	1300156	0.051987269
63:	1505499	0.059539273
64:	1741630	0.068020367
65:	2012558	0.079611781
66:	2323520	0.092205082
67:	2679689	0.10745585
68:	3087735	0.12565556
69:	3554345	0.144693439
70:	4087968	0.1666329
71:	4697205	0.19179202
72:	5392783	0.220721878
73:	6185689	0.255995456
74:	7089500	0.299944541
75:	8118264	0.340588894
76:	9289091	0.388794898
77:	10619863	0.446498793
78:	12132164	0.513649417
79:	13848650	0.593879228
80:	15796476	0.674546396
81:	18004327	0.772333915
82:	20506255	0.882955631
83:	23338469	1.01083101
*/