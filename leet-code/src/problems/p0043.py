#[COMPLETED]

import random

# This solution doesn't use any integer arithmetic, but another solution
# could be a lot simpler by casting digits to integers

class Solution:
    def multiply(self, num1: str, num2: str) -> str:
        # Can do simple repeated addition
        # Or can be smarter and decompose the smaller number to powers of 2
        #  and add larger number to itself n times for each 2^n bit that is on
        # Or can take smallest digit and multiply, shift left by adding zero, add until smaller number is 0
        num_neg = 0
        if num1[0] == '-':
            num_neg += 1
            num1 = num1[1:]
        if num2[0] == '-':
            num_neg += 1
            num2 = num2[1:]
        res_is_pos = num_neg == 0 or num_neg == 2
        res = "0"
        # Find smaller number by length (not always smallest but close)
        if len(num2) > len(num1) or num2[0] > num1[0]:
            temp = num2
            num2 = num1
            num1 = temp

        # Repeatedly multiply by digit and shift
        zeros_to_add = 0
        for digit in num2[::-1]:
            temp = self.multiply_digit(num1, digit)
            temp = temp + ("0" * zeros_to_add)
            res = self.add(res, temp)
            zeros_to_add += 1

        return res if (res_is_pos or res == "0") else '-' + res


    # Can only cary up to 1
    # In form [carry, d1, d2] -> [carry, d] all strings
    add_dict = {"000": "00", "100": "01", "001": "01", "101": "02", "002": "02", "102": "03",
                "003": "03", "103": "04", "004": "04", "104": "05", "005": "05", "105": "06",
                "006": "06", "106": "07", "007": "07", "107": "08", "008": "08", "108": "09", "009": "09", "109": "10",
                "010": "01", "110": "02", "011": "02", "111": "03", "012": "03", "112": "04",
                "013": "04", "113": "05", "014": "05", "114": "06", "015": "06", "115": "07",
                "016": "07", "116": "08", "017": "08", "117": "09", "018": "09", "118": "10", "019": "10", "119": "11",
                "020": "02", "120": "03", "021": "03", "121": "04", "022": "04", "122": "05",
                "023": "05", "123": "06", "024": "06", "124": "07", "025": "07", "125": "08",
                "026": "08", "126": "09", "027": "09", "127": "10", "028": "10", "128": "11", "029": "11", "129": "12",
                "030": "03", "130": "04", "031": "04", "131": "05", "032": "05", "132": "06",
                "033": "06", "133": "07", "034": "07", "134": "08", "035": "08", "135": "09",
                "036": "09", "136": "10", "037": "10", "137": "11", "038": "11", "138": "12", "039": "12", "139": "13",
                "040": "04", "140": "05", "041": "05", "141": "06", "042": "06", "142": "07",
                "043": "07", "143": "08", "044": "08", "144": "09", "045": "09", "145": "10",
                "046": "10", "146": "11", "047": "11", "147": "12", "048": "12", "148": "13", "049": "13", "149": "14",
                "050": "05", "150": "06", "051": "06", "151": "07", "052": "07", "152": "08",
                "053": "08", "153": "09", "054": "09", "154": "10", "055": "10", "155": "11",
                "056": "11", "156": "12", "057": "12", "157": "13", "058": "13", "158": "14", "059": "14", "159": "15",
                "060": "06", "160": "07", "061": "07", "161": "08", "062": "08", "162": "09",
                "063": "09", "163": "10", "064": "10", "164": "11", "065": "11", "165": "12",
                "066": "12", "166": "13", "067": "13", "167": "14", "068": "14", "168": "15", "069": "15", "169": "16",
                "070": "07", "170": "08", "071": "08", "171": "09", "072": "09", "172": "10",
                "073": "10", "173": "11", "074": "11", "174": "12", "075": "12", "175": "13",
                "076": "13", "176": "14", "077": "14", "177": "15", "078": "15", "178": "16", "079": "16", "179": "17",
                "080": "08", "180": "09", "081": "09", "181": "10", "082": "10", "182": "11",
                "083": "11", "183": "12", "084": "12", "184": "13", "085": "13", "185": "14",
                "086": "14", "186": "15", "087": "15", "187": "16", "088": "16", "188": "17", "089": "17", "189": "18",
                "090": "09", "190": "10", "091": "10", "191": "11", "092": "11", "192": "12",
                "093": "12", "193": "13", "094": "13", "194": "14", "095": "14", "195": "15",
                "096": "15", "196": "16", "097": "16", "197": "17", "098": "17", "198": "18", "099": "18", "199": "19",
                }
    # Assumed numbers are strings, only contain digits, both non-negative
    def add(self, num1, num2):
        # Make same length
        while len(num1) != len(num2):
            if len(num1) < len(num2):
                num1 = "0" + num1
            else:
                num2 = "0" + num2

        res = ""
        carry = "0"
        for d1, d2 in zip(num1[::-1], num2[::-1]):
            r = self.add_dict[carry+d1+d2]
            carry = r[0]
            res = r[1] + res

        return "1" + res if carry == "1" else res


    # Carry can go up to 8
    # Takes two digits, gives one digit and a carry
    mult_dict = {"00": "00", "01": "00", "02": "00", "03": "00", "04": "00",
                 "05": "00", "06": "00", "07": "00", "08": "00", "09": "00",
                 "10": "00", "11": "01", "12": "02", "13": "03", "14": "04",
                 "15": "05", "16": "06", "17": "07", "18": "08", "19": "09",
                 "20": "00", "21": "02", "22": "04", "23": "06", "24": "08",
                 "25": "10", "26": "12", "27": "14", "28": "16", "29": "18",
                 "30": "00", "31": "03", "32": "06", "33": "09", "34": "12",
                 "35": "15", "36": "18", "37": "21", "38": "24", "39": "27",
                 "40": "00", "41": "04", "42": "08", "43": "12", "44": "16",
                 "45": "20", "46": "24", "47": "28", "48": "32", "49": "36",
                 "50": "00", "51": "05", "52": "10", "53": "15", "54": "20",
                 "55": "25", "56": "30", "57": "35", "58": "40", "59": "45",
                 "60": "00", "61": "06", "62": "12", "63": "18", "64": "24",
                 "65": "30", "66": "36", "67": "42", "68": "48", "69": "54",
                 "70": "00", "71": "07", "72": "14", "73": "21", "74": "28",
                 "75": "35", "76": "42", "77": "49", "78": "56", "79": "63",
                 "80": "00", "81": "08", "82": "16", "83": "24", "84": "32",
                 "85": "40", "86": "48", "87": "56", "88": "64", "89": "72",
                 "90": "00", "91": "09", "92": "18", "93": "27", "94": "36",
                 "95": "45", "96": "54", "97": "63", "98": "72", "99": "81",
                }
    # Assumed num and digit positive
    def multiply_digit(self, num, digit):
        if digit == "0":
            return "0"
        loc = len(num) - 1
        total = ""
        prev_carry = "0"
        for num_d in num[::-1]:
            res = self.mult_dict[num_d + digit]
            res = self.add(res, prev_carry)
            prev_carry = res[0] if len(res) > 1 else "0"
            if len(res) > 1:
                res = res[1]
            total = res + total
            loc -= 1
        if prev_carry != "0":
            total = prev_carry + total
        return total



sol = Solution()
n1 = str(random.randint(0,1000))
n2 = str(random.randint(0,9))
print(n1, "+", n2, " = ", sol.add(n1, n2), " real solution = ", str(int(n1) + int(n2)), sep="")
print(n1, "*", n2, " = ", sol.multiply_digit(n1, n2), " real solution = ", str(int(n1) * int(n2)), sep="")


n1 = str(random.randint(0,1000))
n2 = str(random.randint(0,1000))
print(n1, "*", n2, " = ", sol.multiply(n1, n2), " real solution = ", str(int(n1) * int(n2)), sep="")



